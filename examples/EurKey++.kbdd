[]
ExtraScanCodesWin=
COMPANYNAME=Steffen Brüntjen, Ilya Zakharevich
+LAYOUTNAME=US-Intl Shift-Space -> Russian phonetic, k.ilyaz.org/v0
+LAYOUTNAME=Russian phonetic Shift-Space -> US-Intl, k.ilyaz.org/v0
COPYR_YEARS=2011,2012
@LOCALE_NAME=en-US,ru-RU
@LOCALE_ID=0409,0419
@DLLNAME=la-ru-iz,ru-la-iz
SORT_ORDER_ID_=0000
@LANGUAGE_NAME=English (United States),Russian (Russia)
#
[Substitutions]
# Will be used when putting a second diacritic: (as <subst-Vietnamese>)
@Vietnamese=åă,àâ,èê,òô,øơ,ùư
#
[DEADKEYS]
#
# Can be omitted now
#
0020=SPACE
#
[visual -> KBD/B/C/D]
#
visual_rowcount=3
@visual_per_row_counts=3,4,4
visual_prefixes= *
in_key_separator=/
prefix_repeat=3
#					Greek-AltGr and CopyRight-AltGr each has only one element: Ω and ©
@layer_names=Greek,Math,Greek-AltGr
@layer_names=Latin,Latin-AltGr,CopyRight,CopyRight-AltGr
@layer_names=Russian,Russian-AltGr,Russian-II,Russian-II-AltGr
#
# Perl 5.8.8 does not recognize  ҇ as a combining character...
#
#	--	¹₁/--≠	²₂	³₃	⁴₄	⁵₅	⁶₆	⁷₇		⁸₈/--∏		⁹₉		⁰₀		⁻/−		⁼⁺/≈∑
	--	--/--≠	--	--	--	--	--	--		--/--∏		--		--		⁻/−		⁼⁺/≈∑
***	`~/ˋ˜	1!/¡¹/¼	2@/ª²/½	3#/º³/¾	4$/€¥/⅓	5%/£¢/⅔	6^/ˆˇ	7&/°¯		8*/„‚		9(/“‘		0)/”’		-_/©№//©	=+/×÷/↔⇔
	ю//ѫ/ѭ	1!/≈≠	2@/²§	3ъ/--№	4Ъ/--£	5ё/--€	6Ё/-- ҃	7&/ ҆ ҇// ꙽ꙿ	8*/∞×/-- ҅	9(/≤←//ҁ	0)/≥→// ꙼꙾	-_/©–		ч//ҷ/ӵ
#
	ω	ψ	ε	ρ/√	τ	υ	ω	η/∞	ο	π/∂	⁽₍	⁾₎	--
***	q/æ	w/å	e/ë	r/ý/®	t/þ/™	y/ÿ	u/ü/↖⇖	i/ï/↗⇗	o/ö	p/œ/℗	[{/«‹	]}/»›	\|/¬¦
	я/ѣ/ѧ/ѩ	в/ѵ/ꙍ/ԝ	е/ё/ө/ӫ	р/ ҄®/ѽ	т/ћ/ҭ/ԏ	ы/і/ү/ұ	у/ў/ӯ/ӱ	и/ѷ/ӣ/ӥ	о/ѡ/ѻ/ѿ	п/ѱ/ԥԤ/ҧ	ш//ԧԦ/ѐ	щ//ꚇ/ѝ	э//ѥ/ӧ
#
	α/∟	σ/∩	δ/∕	φ	γ	θ	ι/∫	κ	λ	₋		₌₊
***	a/ä	s/ß§/℠	d/ð	f/è	g/é	h/ù/←⇐	j/ú/↓⇓	k/ĳ/↑⇑	l/ø/→⇒	;:/¨·		'"/´†
	а/ә/ꙗ/ӓ	с/ѕ/ҫ/ԍ	д/ђ/ӟ/ԁ	ф/ѳ/ғ/ӻ	г/ґ/ӷ/ҕ	х/һ/ҳ/ӽ	й/ї/ҋ/ӑ	к/қ/ҡ/ҟ	л/љ/ӆ/ԓ	;:/¨—/ӹ/ӳ	'"/ ́´/ ́ ̀/ ́ ̀
#
	ζ	ξ	χ	β	β	ν/ⁿ	μ//Ω		--/--≤		--/--≥		--
***	z/à	x/á	c/ç/©	v/ì	b/í	n/ñ/↙⇙	m/Ω±/↘⇘		,</ò		.>/ó		/?/¿…
	з/є/ҙ/ѯ	ь/ъ/ӛ/ӕ	ц/џ/ҵ/ќ	ж/ӂ/җ/ӝ	б/ѓ/ѹ/ꙋ	н/њ/ң/ҥ	м/Ω±/ӎ/ꙟ	,</«„/⁘⁙	.>/»“/·։/჻⁖	/?/ј/;
#
	--	--
***	\|/¶❧	./,
	\|/ӏӀ	./,
#
# Earlier versions had:	б/ѹ (now г overflows down as ...);	7&/ ҅ ҆	/?/§”	2@/²³
# ԥԤ  ԧԦ must be specified both lc/uc since perl 5.10 does not upcases them automatically (v6.0)
# On II-maps: forms with ¨, iotified, latinized forms, forms with more developped appendages, or appendages
# more to the right, or higher, are on AltGr prefix.  (Same for almost-unrelated letters placed
# opportunistically.  (Many are inverted w.r.t. Unicode versions!  Later reason in the list wins.)
#
# ԃ 	Ꚉ 	ӗ
# ԅ 	Ԑ 	ӡ
# ԇ 	ӄ
# ҝ 	Ԟ 	Ԛ 	Ԡ
# ԉ 	Ԕ 	ӊ 	ӈ
# Ԣ 	ԋ 	ҩ
# ҏ
# 
# Ӿ 	Ԧ 	ӌ
# ҹ 	ҽ 	ҿ 	ҍ 	ӭ
# Ԙ 	Ӏ
#
#		Stressed: ѐ ѝ
#
#Non-obvious: '"/́´/ӹ/ӳ	я/ѣ/ѧ/ѩ	б/ѓ/ѹ/ѽ	д/ђ/ӟ/ԁ  й/ї/ҋ/ӑ  ь/ъ/ӛ/ӕ   ф/ѳ/ғ/Ӻ   м/Ω±/ӎ/ꙟ   ш//ԧ/ѐ	щ//ꚇ/ѝ   з/є/ҙ/ѯ  ц/џ/ҵ/ќ
#		р/ ҄®/ꙋ	,</«„/⁘⁙	.>/»“/·։/჻⁖	/?/ј/;	+ 6789
# Coppa is on AltGr since 1/9 fraction pushes it there...
#
[faces/US]
@layers=Latin,Latin-AltGr
LinkFace=CyrillicPhonetic
#
MetaData_Index=0
#    These keys are active when the next character is from layers 0, 1:
@layerDeadKeys= Latin       ˋ  ˜  ˆ  ˇ  °  ¯  ¨  ´  Ω  ±  ©
@layerDeadKeys= Latin-AltGr ˋ  ˜  ˆ  ˇ  °  ¯  ¨  ´  Ω  ±  ©
#
@layerDeadKeys2= 03a6.03a6, 0192.02c7,	0192.00b4
#		=> 0483	=> 0483		=> 03a6
#
#						002c = ,
@char2key_prefer_first=\,|,.,002c
#
# Will be only considered when putting a diacritic on AltGr-key
@AltGrCharSubstitutions=ĳü
#
# Tibetan range: take only tibetan diacritics, so our code adding diacritics won't be confused by prefices... ???
Auto_Diacritic_Start=0f00
Flip_AltGr_Key=00a0
#
DeadKey_InvMap0000=	ByPairs[0192.202f]
#                   Chaining makes sense if Flip_AltGr_Key is on AltGr key (repeating will reach inverted faces of:)
@chainAltGr=0192,03a6,0483
#
Diacritic_if_undef=			SpaceSelf2Id
DeadChar_DefaultTranslation=		♪
DeadChar_32bitTranslation=		♫
#
# 017F,0192,03a6 - good candidates to never be generated on the base face.  But 017F takes accents (use it for dead2 only)
# 00b6=pilcrow 007c=| 002f=/ 00a0=NBSPC --> open box, narrow and hair spaces to figure and narrow nbr-spaces (was: 03a6.2007 00a0.202F)
DeadKey_Map0192=	ByPairs[0020.2422.0192.2423.03a6.2420.02c7.0483.00b4.03a6]	Layers(Russian+Russian-AltGr)
#							was: 0020.2009
DeadKey_Map03a6=	ByPairs[0020.00a0.0192.2007.03a6.0483]	Layers(Russian-II+Russian-II-AltGr)	FromTo[Digits,Denominators1](Face(US))	FromTo[Digits,Numerators1](FlipShift(Face(US)))	FromTo[Digits,Denominators2](FlipLayers(US))	FromTo[Digits,Numerators2](FlipShift(FlipLayers(US)))
# A66F is COMBINING VZMET
DeadKey_Map0483=	ByPairs[0020.2009.0192.2009.03a6.2009]	Diacritic[<pseudo-calculated-combining>](Face(CyrillicPhonetic))	Diacritic[<pseudo-calculated-combining>](FlipShift(Layers(Russian-II+Russian-II-AltGr)))	FromTo[Digits,CyrPowersOfTen](Face(US))	ByPairs[-A66F.S.2df5.D.2df8](Face(US))
#DeadKey_Map0484=	ByPairs[0020.2009.0192.2009.03a6.2009]	Diacritic[<pseudo-calculated-combining>](FlipLayers(CyrillicPhonetic))	Diacritic[<pseudo-calculated-combining>](FlipShift(Layers(Russian-II-AltGr+Russian-II)))	FromTo[Digits,CyrPowersOfTen](FlipLayers(US))	ByPairs[-A66F.S.2df5.D.2df8](FlipLayers(US))
#
#	Repeat 00a0 twice: inverted LinkFace, 3 times: inverted Cyrillic-II
#DeadKey_Map017f=	ByPairs[0020.2420.017f♪00a0.0194'03a6^0483]	Layers(Russian-AltGr+Russian)
#DeadKey_Map0194=	ByPairs[0020.0483.0194♪00a0.0484]	Layers(Russian-II-AltGr+Russian-II)
#'
#				Default map (not used now???):
DeadKey_Map=		Diacritic	Diacritic2Self
#
# diaeresis 00a8: combine with cedilla 0327(00b8) and ogonek 0328, comma below 0326 (precombined only on SsTt)
# ogonek is reachable on AltGr layer...)
# cedilla: only E H unreachable on front layer  except for Ȩȩ Ee - and Hh would be unreachable with AltGr too because of Ǜ - which is typable as ¨Ù)
# (and Ȩȩ is not used in "known" languages - http://fr.wikipedia.org/wiki/E_caudata - alternative writing of æ
#   - moved to Copyright face)
# ẗ gets in the way of Ț and Ţ!		(Used in transliteration of Arabic and UPA; moved to copyright face - on AltGr-t...)
# Ǜ would get in the way of Ḩ (used WHERE?) - available elsewhere - but there it is also penalized...
DeadKey_Map00a8=	Diacritic[+\\ẗ,\\Ǜ[h],00a8|0309+<subst-Vietnamese>|<any-diaeresized>,0328,0327,0326|<any-comma>]	Diacritic2Self
#     <any-comma> picks up digits with comma which are above 0xffff - better make it last
#
#  Combine macron=00af and stroke (AOUaou missing stroke...)  00ad=SOFT HYPHEN; <any-stroke> should pick up 0338; 20D2 (|) and 20E5 \ do not appear in decompositions...
DeadKey_Map00af=	Diacritic[+00af|<pseudo-stroke>,<any-bar>,<any-stroke>,<any-dash>,<any-overbar>,<any-topbar>,<any-diagonal>,<any-strikethrough>,<any-over-equal>,<any-equal>,<any-line>,<any-quill>,<any-base>]	ByPairs[1‐2–3—]	ByPairs[4―0‒¦00ad!‑]	ShiftFromTo[5,˥](SelectRX[[5-9]])	Diacritic2Self
#
# ring above 00b0: combine with dotabove 307 dotbelow 323 
# (only WÊ miss dot below, AUY miss dot above: Ȧ is Livonian and phonetic; U is not precomposed; Ẉ - WHERE???) 
# Ẏ (useful WHERE???) obscures Vietnamese Ỵ, [any-dots does not add anything...]
DeadKey_Map00b0=	Diacritic[+\\Ẏ,00b0||0323+<subst-Vietnamese>|0307,0323|<any-ring>,<any-dot>,<any-dots>,<any-dotless>,<any-other-circle>,<any-circled>,<circle>]	Diacritic2Self
#
#  Combine breve=02d8/0306 and caron 02c7/030c (we do not description of breve-like diacretics!)
#   Note that Ü combines with caron (in 2 ways! Ǖ Ṻ) - but we prefer Ü -> Ǔ;	arc/check not visible
DeadKey_Map02c7=	Diacritic[+02c7|030c|<any-breve>,<any-arc>,<any-caron>,<any-loop>,<any-check>,<any-belt>,<any-flourish>]	Diacritic2Self
#
# combine acute 00b4 and hooks/tails/curls and horn 031b	(double acute=030b/2dd - protect against '' --> "; Ǘ is accessible otherwise, hides Ủ)
DeadKey_Map00b4=	Diacritic[+\\˝,\\Ǘ[u],00b4|030b--00b4,00b4+031b--0300|<pseudo-hook>,<any-hook>,<any-fishhook>,<pseudo-tail>,<any-leg>,<any-tail>,<pseudo-curl>,<any-apostrophe>,<any-tick>|031b]	Diacritic2Self
#
# Do not need 00b4+<subst-Vietnamese> ???
#
# double grave 30f, grave 60/2cb/300; append reversed list for acute (horn=031b)	
# (tnvz have 3 type of hooks attached; the middle one [palatal] on nz are not reached ƫᶇᶌᶎ)
# Ǜ would get in the way of Vietnamese Ư (it could be available elsewhere, but there it is also penalized...)
DeadKey_Map02cb=	Diacritic[-2/\\Ǜ[u],02cb|030f--0300,02cb+031b--0301,031b--00a8|031b,<any-tick>,<any-apostrophe>,<pseudo-curl>,<any-tail>,<any-leg>,<pseudo-tail>,<any-fishhook>,<reverse-any-other-hook>,<pseudo-hook>|00b4,030b--00b4]	Diacritic2Self
#
#	(For the purpose of double accents, grave 0300 is considered equivalent to horn 031b or hat 02c6, ring 00b0 to breve 02d8/0306, with-stroke to horn)
DeadKey_Map02dc=	Diacritic[-2/\\ı,02dc|02dc+<subst-Vietnamese>,<any-tilde>,<any-equivalent>|<any-descender>,<any-upturn>,<any-calculated>,<pseudo-smallcaps>|02c6]	Diacritic2Self
#
# Hat:  (if both smallcaps and turned/etc defined in the same Unicode version, prefer smallcaps) [loop/upturn not visible]
DeadKey_Map02c6=	Diacritic[+\\ı,02c6|<pseudo-smallcaps>,<reverse-any-calculated>,<reverse-any-loop>,<reverse-any-upturn>,<reverse-any-descender>]	Diacritic2Self
#
# Create DeadKey maps basing on visual descriptions:
#
DeadKey_Map00a9_0=	Id(CopyRight)		Diacritic[0327](SelectRX[[eE]](Latin))	ByPairs[$¤,¸qĸ](Latin)
DeadKey_Map00a9_1=	Id(CopyRight-AltGr)	Diacritic[00a8](SelectRX[[t]](Latin))
DeadKey_Map00b1_0=	Id(Math)
DeadKey_Map00b1_1=				SpaceSelf2Id
# 0301 over Greek letters=tonos;   0308=dialytika
DeadKey_Map03a9_0=	Id(Greek)	Diacritic[<super>](SelectRX[[0-9]])	Diacritic[<sub>](SelectRX[[0-9]](FlipShift))	Diacritic[0308](ByPairs[.υ,ι<Ι>Υ](Latin))	ByPairs[/₯?;`΄_ͺ](Latin)
DeadKey_Map03a9_1=	Id(Greek-AltGr)		Diacritic[0308+0301](ByPairs[.υ,ι<Ι>Υ](Latin))	Diacritic[0301,<any-calculated-symbol>,<any-calculated-final>,<any-lunate-symbol>](Greek)	ByPairs[Mµ](Latin)
#
# From Bépo's tables (with Cedi ₵ on cedilla [not shown?!], and bengali rupee mark ৲ on þ):
# ؋฿¢₫€ƒ₲₴﷼₭£₥₦௹₰₢₪৳元₩¥৲
# ₳₱₡₯₠₣₲₴៛₭₤ℳ₦૱₧₨$₮圓₩円 	¤
#
[faces/US/VK]
#
@SPACE=,0020,0192@,03a6@,00a0@
#@TAB=,0009,0009,0483@,0484@
#
# Dotted circle, black circle, white circle
#@APPS=,-1,25CC@,25CF@,25EF@
#
# Non-breakable translations (non-ideal 2007), 202F
#
[faces/CyrillicPhonetic]
#
@layers=Russian,Russian-AltGr
BaseLayer=Latin
LinkFace=US
#
MetaData_Index=1
#
#    These keys are active when the next character is from layers 0, 1:
@layerDeadKeys= Russian       Ω  ±  © 0192	́	҃
@layerDeadKeys= Russian-AltGr Ω  ±  © 0192	́	҃
#
@layerDeadKeys2= 03a6.03a6,	00a0.Ё
#		=> 0483	     	=> 0483
#
# Pressing AltGr-| produces |; with the setting below, pressing SWITCH AltGr-| produces the expected ¦
# Otherwise: the keys on OEM_102 (the SECOND \|) (which produce \| when both on Cyrillic and Latin) 
# would be prefered, and SWITCH AltGr-| would be resolved as "map | to Latin", and would produce |.
#						002c = ,
@char2key_prefer_first=\,|,.,002c
@char2key_prefer_last=Ё,Ъ,ё,ъ
#
# Tibetan range: take only tibetan diacritics, so our code adding diacritics won't be confused by prefices... ???
Auto_Diacritic_Start=0f00
Flip_AltGr_Key=00a0
#
# (Ё would be mapped to Е if we do not specify it explicitly:)
DeadKey_InvMap0000=	ByPairs[0192.202f.Ё.0483]
#                   Chaining makes sense if Flip_AltGr_Key is on AltGr key (repeating will reach inverted faces of:)
@chainAltGr=0301,0483,0192
@Explicit_AltGr_Invert=0192,03a6
#
Diacritic_if_undef=			SpaceSelf2Id
DeadChar_DefaultTranslation=		♪
DeadChar_32bitTranslation=		♫
#
DeadKey_Map0192=	ByPairs[0020.2422.0192.2423.03a6.2420]	Layers(Latin+Latin-AltGr)
DeadKey_InvMap0192=	ByPairs[0020.00a0.0192.2007.03a6.0483]
#
DeadKey_Map00a9_0=	Id(CopyRight)		Diacritic[0327](SelectRX[[eE]](Latin))	ByPairs[$¤,¸qĸ](Latin)
DeadKey_Map00a9_1=	Id(CopyRight-AltGr)	Diacritic[00a8](SelectRX[[t]](Latin))
#
DeadKey_Map00b1_0=	Id(Math)
DeadKey_Map00b1_1=				SpaceSelf2Id
DeadKey_Map03a9_0=	Id(Greek)	Diacritic[<super>](SelectRX[[0-9]])	Diacritic[<sub>](SelectRX[[0-9]](FlipShift))	Diacritic[0308](ByPairs[.υ,ι<Ι>Υ](Latin))	ByPairs[/₯?;`΄_ͺ](Latin)
DeadKey_Map03a9_1=	Id(Greek-AltGr)		Diacritic[0308+0301](ByPairs[.υ,ι<Ι>Υ](Latin))	Diacritic[0301,<any-calculated-symbol>,<any-calculated-final>](Greek)	ByPairs[Mµ](Latin)
#
DeadKey_Map0301_0=	Id(Russian-II)		FromTo[Digits,Denominators1](LinkFace)	FromTo[Digits,Numerators1](FlipShift(Latin))
# This ByPairs is tricky: we want to translate AltGr-Shift-Space; one might think one must use the mapping of non-AltGr layer???
DeadKey_Map0301_1=	Id(Russian-II-AltGr)	FromTo[Digits,Denominators2](Latin)	FromTo[Digits,Numerators2](FromToFlipShift[Latin,Latin](Latin))	ByPairs[$⅘](Latin)
#				0483 is ҃ titlo, A66F is combining vzmet, 2df5 is combining ST, 2df8 is combining DJERV (which we do not have non-combining???)
DeadKey_Map0483=	ByPairs[0020.2009.0192.2009.03a6.2009]	Diacritic[<pseudo-calculated-combining>](Face(CyrillicPhonetic))	Diacritic[<pseudo-calculated-combining>](FlipShift(Layers(Russian-II+Russian-II-AltGr)))	FromTo[Digits,CyrPowersOfTen](Face(US))	ByPairs[-A66F.S.2df5.D.2df8](Face(US))
DeadKey_InvMap0483=	ByPairs[0192.2009]
#DeadKey_Map0484=	ByPairs[0020.2009.0192.2009.03a6.2009.00a0.017f]	Diacritic[<pseudo-calculated-combining>](FlipLayers(CyrillicPhonetic))	Diacritic[<pseudo-calculated-combining>](FlipShift(Layers(Russian-II-AltGr+Russian-II)))	FromTo[Digits,CyrPowersOfTen](FlipLayers(US))	ByPairs[-A66F.S.2df5.D.2df8](FlipLayers(US))
#
#	Repeat 00a0 twice: inverted LinkFace, 3 times: inverted Cyrillic-II
#DeadKey_Map017f=	ByPairs[0020.2420.017f♪]	Layers(Latin-AltGr+Latin)
#DeadKey_Map0194=	ByPairs[0020.0483.0194♪00a0.0484]	Layers(Russian-II-AltGr+Russian-II)
#
# On SPACE, pretend that the deadkey assignment is as revealed by following by SPACE	(Ё would be mapped to Е if we do not specify it explicitly:)
# DeadKey_Map00a0=	ByPairs[0020.03a6.0192.202f.00a0.0194.Ё.0483]	FlipLayers
#
#DeadKey_Map03a6=	ByPairs[0020.00a0.0192.2007.03a6.0483]	FlipLayers(US)
#
[faces/CyrillicPhonetic/VK]
#
@SPACE=,0020,0192@,03a6@,00a0@
#@TAB=,0009,0009,0483@,0484@
#
# Dotted circle, black circle, white circle
#@APPS=,-1,25CC@,25CF,25EF
#
####[DEADKEYS/eurkey/1/1]
#####
####klc_filename=eurkey-std.klc
#####
#####    Now is not needed at all
#####
[visual -> DEADKEYS/la_ru]
#
# Can be omitted now:
#
KEYNAME_DEAD

02c6	"MODIFIER LETTER CIRCUMFLEX ACCENT"
00b4	"ACUTE ACCENT"
00b1	"PLUS-MINUS SIGN"
00a8	"DIAERESIS"
00a9	"COPYRIGHT SIGN"
00b0	"DEGREE SIGN"
02cb	"MODIFIER LETTER GRAVE ACCENT (Mandarin Chinese fourth tone)"
00af	"MACRON"
02dc	"SMALL TILDE"
02c7	"CARON (Mandarin Chinese third tone)"
03a9	"GREEK CAPITAL LETTER OMEGA"


[visual -> KBD/Digits]
#
# For fractions, we look for fractions with minimal denominator/numerator which contain the given digit in numerator/denominator.  We take the first one and the second one from the list.
# Note that ⅗, ⅝, ⅞ do not appear in the lists via denominators; and ⅓, ¼, ⅕, ⅙, ⅛ do not appear in the lists via numerators.
# All Unicoded fractions appear in these lists.  So each one can be entered via a DeadKeyMap.
#
#
visual_rowcount=10
@visual_per_row_counts=1,1,2,1,1,1,1,1,1,1
visual_prefixes=<* *<> < +
in_key_separator=/
prefix_repeat=3
#
@layer_names=Numerators2,Numerators1,Digits,OverDigits,Denominators1,Denominators2,Super,SuperExtraLetters,Sub,SubExtraLetters,CyrPowersOfTen
# ↉ 0/3  ⅐ 1/7 ⅑ 1/9
<<<	½	⅖	⅗	--	⅝	--	--	--	--	--	--	--	--	--	--	--	--	--	--
***	⅟	⅔	¾	⅘	⅚	--	⅞	--	--	↉	--	--	--	--	--	--	--	--	--
	1/!	2/@	3/#	4/$	5/%	6/^	7/&	8/*	9/(	0/)	--	--	--	--	--	--	--	--	--
***	⅒	½	⅓	¼	⅕	⅙	⅐	⅛	⅑	⅒	--	--	--	--	--	--	--	--	--
<<<	--	--	⅔	¾	⅖	⅚	--	⅜	--	--	--	--	--	--	--	--	--	--	--
>>>	¹	²	³	⁴	⁵	⁶	⁷	⁸	⁹	⁰	ⁱ	⁲	⁳	⁺	⁻	⁼	⁽	⁾	ⁿ
	--	--	--	--	--	--	--	--	--	--	i	--	--	+	-	=	(	)	n
<<<	₁	₂	₃	₄	₅	₆	₇	₈	₉	₀	₊	₋	₌	₍	₎	₏	--	--	--
	--	--	--	--	--	--	--	--	--	--	+	-	=	(	)	ə	--	--	--
+++	--	--	҂	 ⃝	 ҈	 ҉	꙰	꙱	꙲	--	--	--	--	--	--	--	--	--	--
#
#
# Most of the above are very optional now: Super and Sup are obsoleted by Diacritic[<super>] etc
# combined with Select[] clauses.  Register mapping is not done yet (2011) but can be easily done.
#
[Diacritics_Limits]
# For debugging purposes only, to check correct reading of tables below (0th entry is for 0..3 combined)
@ALL=6,1,0,0
[Diacritics]
# Surrogate + 8bit + Modifiers, Modifiers below, Vertical (or Comma-like or Doubled or Dotlike or Rotated or letter-like) Modifiers, Prime-like or Centered modifiers, Combining, Combining below, Vertical combining and dotlike Combining
/APOSTROPHE=		'´ʼʾˀˊ΄/ˏˌ/ˈˌˡ/ʹˑ/ ́ ̉ ̛ ̷ ̸ ́ ̓ ͗/ ̗ ̩/ ̍ ̩ ̓ ̕
/QUOTATION_MARK=	"¨˝˸ː΅/˶˵/ˮ/ʺ/ ̈ ̋ ̏ ̈́/ ͈ / ̎ ͈
/GRAVE_ACCENT=		`ˋʿˁˤ/ˎ/ʻʽ/˴˵/ ̀ ̀/ ̖/ ̒ ̔
/CIRCUMFLEX_ACCENT=	^ˆ˄˟/˰/˪˫ꜛʳʴʵʶˣ// ̂ ̑  ͡/ ̭ ̯
/BREVE=			˘ˇ˅/ˬ˯˽˾/˱˲˿ˠʸꜜ/˂˃/ ̆ ̌ ̐ ͝  / ̮ ̬ ͜
/DEGREE_SIGN=		°˚˙/˳/˙ˠʰʱʲˢʷᵊᶣ/˓˒/ ̊/ ̣ ̥ ̤/ ̇ ͘  ̣ ̤
/TILDE=			~˜/˷¸˛ͺ/ⸯꙿ/˞/ ̃ ̴ ͂ ͊ ͋ ͌   ͠/ ̰/ ̾
/MACRON=		¯ˉ˹˺/ˍ˻˼‗/˭/˔˕˖˗/ ̄ ̅ ̵ ̶ ̿ ͞ / ̱ ̲ ̳ ͇ ͟   
#
# These are from "main blocks" of the modifiers and combining; plus Greek standalone diacritics: ͺ΄΅
# One of ˠ is obscured by vertical line with middle dot...  The Macron-\ 29F7 obscures ˭.
# Circled \ and | with middle dot obscure ˙ˠ.  ˙ duplicated (forward) to make accessible.
# ʰʱʲˡˢʷ - from IPA.  The rest (and ʳʴʵʶʸ) are v1.1 letter modifiers.  (ˠ is in front to unobscure the rest.)
#`´¨˜ˆˇ°¯
#
